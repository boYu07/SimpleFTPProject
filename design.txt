"""
   设计思路
"""

    ftp 文件服务器
        1. 分为服务端和客户端，要求可以有多个客户端同时操作。
        2. 客户端可以查看服务器文件库中有什么文件。
        3. 客户端可以从文件库中下载文件到本地。
        4. 客户端可以上传一个本地文件到文件库。
        5. 使用print在客户端打印命令输入提示，引导操作

    通信协议:
        客户端:
            "L" 显示文件
            "U file_path" 上传文件
            "D file_name" 下载文件
            "Q" 退出
        服务端:
            "Y" 表示允许
            "N" 表示拒绝
        文件收发:
            "##" 传送完毕
            "$$" 接收完毕
            "ERROR" 表示传送失败 # 暂时没用到

    技术分析:
        1. 通信方式: TCP
        2. 网络并发模型: 线程/进程

    功能分析:
        显示文件:
            客户端:
                1. 向服务端发送请求
                2. 接收服务端反馈 Y/N
                    Y 从服务端接收文件信息
                    N 结束
            服务端:
                1. 接收并解析客户端请求
                2. 查看文件库,并向客户端反馈 Y/N
                    Y 允许请求,向客户端发送文件信息
                    N 拒绝请求,文件库没有文件

        上传文件:
            客户端:
                1. 向服务端发送请求
                2. 接受服务端反馈 Y/N
                    Y 向服务端传送文件 "##" 代表发送完毕
                    N 结束
                3. 接收服务端反馈 "$$" 表示接收完毕

            服务端:
                1. 接收并解析客户端请求
                2. 查看文件库,并向客户单反馈 Y/N
                    Y 允许请求,接收客户端文件 "##" 代表对方发送完毕
                    N 拒绝请求,文件库有重名文件
                3. 向客户端发送消息 "$$" 表示接收完毕

        下载文件:
            客户端:
                1. 向服务端发送请求
                2. 接受服务端反馈 Y/N
                    Y 从服务端接收文件 "##" 代表对方发送完毕 文件存在则重新命名
                    N 结束
                3. 向服务端发送消息 "$$" 表示接收完毕

            服务端:
                1. 接收并解析客户端请求
                2. 查看文件库,并向客户单反馈 Y/N
                    Y 允许请求,向客户端发送文件 "##" 代表发送完毕
                    N 拒绝请求,文件不存在
                3. 接收客户端反馈 "$$" 表示接收完毕

        退出:
            客户端:
                1. 向服务端发送请求
                2. 退出程序

            服务端:
                1. 接收并解析客户端请求
                2. 结束线程
